// 약수 구하기
vector<int> divisior(int n){
    vector<int> div;
    for(int i=1; i*i<=n; i++){
        if(n % i == 0) div.push_back(i);
    }
    for(int j=(int)div.size()-1; j>=0; j--){
        if(div[j]*div[j] == n)  continue;
        div.push_back(n / div[j]);
    }
    return div;
}

// 최대공약수(GCD, Greatest Common Divisior) = 두 자연수의 공통된 약수 중 가장 큰 약수
// 유클리드 호제법
//  두 수 A, B에 대해 A를 B로 나눈 나머지를 r(=A%B)이라고 하면, GCD(A, B) = GCD(B, r)이다.
// GCD(A, B) = GCD(B, A%B)
// GCD
int gcd(int a, int b){
    if(a==0) return b;
    return gcd(b%a, a);
}
// LCM(Least Common Multiple)
// A * B = GCD(A, B) * LCM(A, B)
int lcm(int a, int b){
    return a / gcd(a, b) * b;
}

