어떤 수가 소수인지 O(sqrt(n))에 판단
bool isprime(int n){
    if(n == 1) return 0;
    for(int n=2; i*i<=n; i++){
        if(n%i == 0)    return 0;
    }
    return 1;
}

// 범위 내에서의 소수 판정법
// Sieve of Eratosthenes
vector<int> sieve(int n){
    vector<int> primes;
    vector<bool> state(n+1, true);
    state[1] = false;
    for(int i=2; i*i<=n; i++){
        if(!state[i]) continue;
        for(int j=i*i; j<=n; j+=i)
            state[j] = false;
    }
    for(int i=2; i<=n; i++){
        if(state[i]) primes.push_back(i);
    }
    return primes;
}

// 소인수분해
//prime factorization
https://www.acmicpc.net/problem/11653
void factorization(n){
    for(int i=2; i*i<=n; i++){
        while(n%i == 0){
            cout << i <<'\n';
            n /= i;
        }
    }
    if(n!=1)    cout << n;
}

// 약수 구하기
vector<int> divisior(int n){
    vector<int> div;
    for(int i=1; i*i<=n; i++){
        if(n % i == 0) div.push_back(i);
    }
    for(int j=(int)div.size()-1; j>=0; j--){
        if(div[j]*div[j] == n)  continue;
        div.push_back(n / div[j]);
    }
    return div;
}